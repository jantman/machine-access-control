# This config expects the following hardware:
#
# - pcf8574 16x2 I2C character LCD connected with SDA on GPIO22 and SCL on GPIO33
# - wiegand RFID reader connected with d0 on GPIO16, d1 on GPIO4, and card present on GPIO25
# - oops button connected between GPIO32 and ground, no external resistors (internal pullup)
#
# And the following secrets in ESPHome's secrets.yaml:
#
# - api_encryption_key - maybe not even needed? is this just for HomeAssistant?
# - ota_password - password for OTA updates
# - wifi_ssid
# - wifi_password
# - domain_name
# - mac_url - the full URL to the /api/machine/update endpoint of the machine-access-control server
#
substitutions:
  machine_name: "esp32test"

esphome:
  name: ${machine_name}
  friendly_name: ${machine_name}

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain_name
  reboot_timeout: "1min"
  on_connect:
    then:
      - lambda: |-
            id(display_content) = "Please insert\naccess card";

globals:
  - id: display_content
    type: std::string
    restore_value: False
    max_restore_data_length: 34
    initial_value: '"Connecting to WiFi"'
  - id: rfid_tag
    type: std::string
    restore_value: False
    max_restore_data_length: 34
    initial_value: '""'

http_request:

i2c:
  sda: GPIO22
  scl: GPIO23

sensor:
  - platform: uptime
    name: Uptime
    id: uptime_sensor
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""
  - platform: internal_temperature
    name: "esp32_internal_temperature"

binary_sensor:
  - platform: gpio
    pin: GPIO25
    name: "Card Present"
    id: card_present
    on_release:
      then:
        - lambda: ESP_LOGI("TAG", "RFID tag removed");
        - lambda: |-
            id(rfid_tag) = "";
            id(display_content) = "Please insert\naccess card";
            id(my_display).print("Please insert\naccess card");
        - http_request.post:
            url: !secret mac_url
            headers:
              Content-Type: application/json
            json: |-
              root["oops"] = id(oops_button).state;
              root["rfid_value"] = id(rfid_tag);
              root["uptime"] = id(uptime_sensor).state;
  - platform: gpio
    pin:
      number: GPIO32
      mode:
        input: True
        pullup: True
    name: "oops"
    id: oops_button
    filters:
      - delayed_on: 10ms
    on_press:
      then:
        - lambda: ESP_LOGI("OOPS", "Oops button pressed");
        - lambda: |-
            id(display_content) = "OOPS!";
            id(my_display).print("OOPS!");
        - http_request.post:
            url: !secret mac_url
            headers:
              Content-Type: application/json
            json: |-
              root["oops"] = id(oops_button).state;
              root["rfid_value"] = id(rfid_tag);
              root["uptime"] = id(uptime_sensor).state;

button:
  - platform: restart
    name: "Reboot ESP"

wiegand:
  - id: keypad
    d0: GPIO16
    d1: GPIO4
    on_tag:
      - lambda: ESP_LOGI("TAG", "received tag %s", x.c_str());
      - lambda: |-
            id(rfid_tag) = x.c_str();
            id(display_content) = ((std::string) "TAG RX: " + x).c_str();
            id(my_display).print(((std::string) "TAG RX: " + x).c_str());
      - http_request.post:
          url: !secret mac_url
          headers:
            Content-Type: application/json
          json: |-
            root["oops"] = id(oops_button).state;
            root["rfid_value"] = id(rfid_tag);
            root["uptime"] = id(uptime_sensor).state;

display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    address: 0x27
    id: my_display
    lambda: |-
      it.print(id(display_content));
